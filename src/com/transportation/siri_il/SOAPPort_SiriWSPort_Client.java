
package com.transportation.siri_il;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.namespace.QName;

import com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2012-12-06T09:58:00.230+02:00
 * Generated source version: 2.7.0
 * 
 */
public final class SOAPPort_SiriWSPort_Client {

    private static final QName SERVICE_NAME = new QName("http://new.webservice.namespace", "SiriServices");

    private SOAPPort_SiriWSPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = SiriServices.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        SiriServices ss = new SiriServices(wsdlURL, SERVICE_NAME);
        SOAPPort port = ss.getSiriWSPort();  
        
        System.out.println("Invoking getStopMonitoringService...");
        ServiceRequestStructure request = new ServiceRequestStructure();
        
        request.requestorRef = new ParticipantRefStructure();
        request.requestorRef.value = "HM391083";
        request.requestTimestamp = new XMLGregorianCalendarImpl(new GregorianCalendar());
        
        StopMonitoringRequestStructure newRequest = new StopMonitoringRequestStructure();
        newRequest.setRequestTimestamp(new XMLGregorianCalendarImpl(new GregorianCalendar()));
        OperatorRefStructure operatorRef = new OperatorRefStructure();
        operatorRef.value = args[1];
		newRequest.setOperatorRef(operatorRef);
        LineRefStructure lineRef = new LineRefStructure();
        lineRef.value = args[2];
        newRequest.setLineRef(lineRef);
        MonitoringRefStructure monitoringRef =  new MonitoringRefStructure();
        monitoringRef.value = args[3];
        newRequest.setMonitoringRef(monitoringRef);
        request.getStopMonitoringRequest().add(newRequest);      
        
        
        ServiceDeliveryStructure response = port.getStopMonitoringService(request);   
        if (response.getErrorCondition().description != null )
        	System.out.println("getStopMonitoringService errorCondition = " + response.getErrorCondition().description.getValue());
        else
        	System.out.println("getStopMonitoringService result = " + response.getStopMonitoringDelivery().size());
         System.exit(0);
    }

}
